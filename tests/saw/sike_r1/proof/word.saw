//word.saw Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

///////////////////////////////////////////////////////////////////////////////
// Verify the word and digit operations

import "../spec/Loader.cry";


///////////////////////////////////////////////////////////////////////////////
// Specifications

let copy_words_spec n = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array n digit_t);
    crucible_execute_func [ap, cp, tm {{ `n : [32] }}];
    crucible_points_to cp (tm a);
};

let copy_words_same_spec n = do {
    (a, ap) <- ptr_to_fresh "a" (llvm_array n digit_t);
    crucible_execute_func [ap, ap, tm {{ `n : [32] }}];
    crucible_points_to ap (tm a);
};

let digit_x_digit_spec = do {
    a <- fresh_digit "a";
    b <- fresh_digit "b";
    cp <- crucible_alloc (llvm_array 2 digit_t);
    crucible_execute_func [tm a, tm b, cp];
    points_to_fresh cp "c" (llvm_array 2 digit_t);
    return ();
};

let is_digit_lessthan_ct_spec = do {
    a <- fresh_digit "a";
    b <- fresh_digit "b";
    crucible_execute_func [tm a, tm b];
    r <- crucible_fresh_var "r" i32;
    crucible_return (tm r);
};

let is_digit_nonzero_ct_spec = do {
    a <- fresh_digit "a";
    crucible_execute_func [tm a];
    r <- crucible_fresh_var "r" i32;
    crucible_return (tm r);
};

let is_digit_zero_ct_spec = do {
    a <- fresh_digit "a";
    crucible_execute_func [tm a];
    r <- crucible_fresh_var "r" i32;
    crucible_return (tm r);
};

let mp_add_spec n = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    (b, bp) <- ptr_to_fresh_readonly "b" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array n digit_t);

    crucible_execute_func [ap, bp, cp, tm {{ `n : [32] }}];

    points_to_fresh cp "c" (llvm_array n digit_t);
    ret <- crucible_fresh_var "ret" i32;
    crucible_return (tm ret);
};

let mp_add_single_spec n = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array n digit_t);

    crucible_execute_func [ap, ap, cp, tm {{ `n : [32] }}];

    points_to_fresh cp "c" (llvm_array n digit_t);
    ret <- crucible_fresh_var "ret" i32;
    crucible_return (tm ret);
};

let mp_add_left_spec n = do {
    (a, ap) <- ptr_to_fresh "a" (llvm_array n digit_t);
    (b, bp) <- ptr_to_fresh_readonly "b" (llvm_array n digit_t);

    crucible_execute_func [ap, bp, ap, tm {{ `n : [32] }}];

    points_to_fresh ap "c" (llvm_array n digit_t);
    ret <- crucible_fresh_var "ret" i32;
    crucible_return (tm ret);
};

let mp_sub_spec n = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    (b, bp) <- ptr_to_fresh_readonly "b" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array n digit_t);

    crucible_execute_func [ap, bp, cp, tm {{ `n : [32] }}];

    points_to_fresh cp "c" (llvm_array n digit_t);
    ret <- crucible_fresh_var "ret" i32;
    crucible_return (tm ret);
};

let mp_sub_left_spec n = do {
    (a, ap) <- ptr_to_fresh "a" (llvm_array n digit_t);
    (b, bp) <- ptr_to_fresh_readonly "b" (llvm_array n digit_t);

    crucible_execute_func [ap, bp, ap, tm {{ `n : [32] }}];

    points_to_fresh ap "c" (llvm_array n digit_t);
    ret <- crucible_fresh_var "ret" i32;
    crucible_return (tm ret);
};

let mp_mul_spec n m = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    (b, bp) <- ptr_to_fresh_readonly "b" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array m digit_t);

    crucible_execute_func [ap, bp, cp, tm {{ `n : [32] }}];

    points_to_fresh cp "c" (llvm_array m digit_t);
    return ();
};

let mp_mul_single_spec n m = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array m digit_t);

    crucible_execute_func [ap, ap, cp, tm {{ `n : [32] }}];

    points_to_fresh cp "c" (llvm_array m digit_t);
    return ();
};

let mp_shiftr1_spec n = do {
    (x, xp) <- ptr_to_fresh "x" (llvm_array n digit_t);
    crucible_execute_func [xp, tm {{ `n : [32] }}];
    points_to_fresh xp "x'" (llvm_array n digit_t);
    return ();
};


///////////////////////////////////////////////////////////////////////////////
// Proof commands

// NOTE: 4*nwords_field for xDBLe and xTPLe
let nwords_field_x4 = eval_int {{ `(4 * nwords_field) : [64] }};
copy_words_nwords_field_x4_ov <- verify copy_words_fun_name [] (copy_words_spec nwords_field_x4);
copy_words_same_nwords_field_x4_ov <- verify copy_words_fun_name [] (copy_words_same_spec nwords_field_x4);

dxd_ov <- verify digit_x_digit_fun_name [] digit_x_digit_spec;
dlt_ov <- verify is_digit_lessthan_ct_fun_name [] is_digit_lessthan_ct_spec;
dnz_ov <- verify is_digit_nonzero_ct_fun_name [] is_digit_nonzero_ct_spec;
dz_ov <- verify is_digit_zero_ct_fun_name [] is_digit_zero_ct_spec;

add_ov <- verify mp_add_fun_name [] (mp_add_spec nwords_field);
add_single_ov <- verify mp_add_fun_name [] (mp_add_single_spec nwords_field);

addx2_ov <- verify mp_add_fun_name [] (mp_add_spec twice_nwords_field);
addx2_left_ov <- verify mp_add_fun_name [] (mp_add_left_spec twice_nwords_field);

sub_ov <- verify mp_sub_fun_name [] (mp_sub_spec twice_nwords_field);
sub_left_ov <- verify mp_sub_fun_name [] (mp_sub_left_spec twice_nwords_field);

mul_ov <- verify mp_mul_fun_name
  [dxd_ov]
  (mp_mul_spec nwords_field twice_nwords_field);
mul_single_ov <- verify mp_mul_fun_name
  [dxd_ov]
  (mp_mul_single_spec nwords_field twice_nwords_field);

shiftr1_ov <- verify mp_shiftr1_fun_name [] (mp_shiftr1_spec nwords_field);

