//word.saw Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

///////////////////////////////////////////////////////////////////////////////
// Verify the word and digit operations

import "../spec/Loader.cry";

///////////////////////////////////////////////////////////////////////////////
// Specifications

let binary_words_op t n = do {
    let at = llvm_array n t;
    (a, ap) <- ptr_to_fresh_readonly "a" at;
    (b, bp) <- ptr_to_fresh_readonly "b" at;
    cp <- crucible_alloc at;

    crucible_execute_func [ap, bp, cp];

    c <- crucible_fresh_var "c" at;
    crucible_points_to cp (tm c);
};

let binary_words_left_op t n = do {
    let at = llvm_array n t;
    (a, ap) <- ptr_to_fresh "a" at;
    (b, bp) <- ptr_to_fresh_readonly "b" at;

    crucible_execute_func [ap, bp, ap];

    c <- crucible_fresh_var "c" at;
    crucible_points_to ap (tm c);
};

let binary_words_op_single t n = do {
    let at = llvm_array n t;
    (a, ap) <- ptr_to_fresh "a" at;
    cp <- crucible_alloc at;

    crucible_execute_func [ap, ap, cp];

    c <- crucible_fresh_var "c" at;
    crucible_points_to cp (tm c);
};

let clear_words_spec n = do {
    mp <- crucible_alloc (llvm_array n digit_t);
    crucible_execute_func [mp, tm {{ `n : [64] }}];
    crucible_points_to mp (tm {{ zero : [n][64] }});
};

let copy_words_spec n = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array n digit_t);
    crucible_execute_func [ap, cp, tm {{ `n : [32] }}];
    crucible_points_to cp (tm a);
};

let copy_words_same_spec n = do {
    (a, ap) <- ptr_to_fresh "a" (llvm_array n digit_t);
    crucible_execute_func [ap, ap, tm {{ `n : [32] }}];
    crucible_points_to ap (tm a);
};

let digit_x_digit_spec = do {
    a <- fresh_digit "a";
    b <- fresh_digit "b";
    cp <- crucible_alloc (llvm_array 2 digit_t);
    crucible_execute_func [tm a, tm b, cp];
    points_to_fresh cp "c" (llvm_array 2 digit_t);
    return ();
};

let is_digit_lessthan_ct_spec = do {
    a <- fresh_digit "a";
    b <- fresh_digit "b";
    crucible_execute_func [tm a, tm b];
    r <- crucible_fresh_var "r" i32;
    crucible_return (tm r);
};

let is_digit_nonzero_ct_spec = do {
    a <- fresh_digit "a";
    crucible_execute_func [tm a];
    r <- crucible_fresh_var "r" i32;
    crucible_return (tm r);
};

let is_digit_zero_ct_spec = do {
    a <- fresh_digit "a";
    crucible_execute_func [tm a];
    r <- crucible_fresh_var "r" i32;
    crucible_return (tm r);
};

let mp_add_spec n = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    (b, bp) <- ptr_to_fresh_readonly "b" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array n digit_t);

    crucible_execute_func [ap, bp, cp, tm {{ `n : [32] }}];

    points_to_fresh cp "c" (llvm_array n digit_t);
    ret <- crucible_fresh_var "ret" i32;
    crucible_return (tm ret);
};

let mp_add_single_spec n = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array n digit_t);

    crucible_execute_func [ap, ap, cp, tm {{ `n : [32] }}];

    points_to_fresh cp "c" (llvm_array n digit_t);
    ret <- crucible_fresh_var "ret" i32;
    crucible_return (tm ret);
};

let mp_add_left_spec n = do {
    (a, ap) <- ptr_to_fresh "a" (llvm_array n digit_t);
    (b, bp) <- ptr_to_fresh_readonly "b" (llvm_array n digit_t);

    crucible_execute_func [ap, bp, ap, tm {{ `n : [32] }}];

    points_to_fresh ap "c" (llvm_array n digit_t);
    ret <- crucible_fresh_var "ret" i32;
    crucible_return (tm ret);
};

let mp_addfast_spec n = binary_words_op digit_t n;
let mp_addfast_single_spec n = binary_words_op_single digit_t n;
let mp_addfast_left_spec n = binary_words_left_op digit_t n;

let mp_sub_spec n = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    (b, bp) <- ptr_to_fresh_readonly "b" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array n digit_t);

    crucible_execute_func [ap, bp, cp, tm {{ `n : [32] }}];

    points_to_fresh cp "c" (llvm_array n digit_t);
    ret <- crucible_fresh_var "ret" i32;
    crucible_return (tm ret);
};

let mp_sub_left_spec n = do {
    (a, ap) <- ptr_to_fresh "a" (llvm_array n digit_t);
    (b, bp) <- ptr_to_fresh_readonly "b" (llvm_array n digit_t);

    crucible_execute_func [ap, bp, ap, tm {{ `n : [32] }}];

    points_to_fresh ap "c" (llvm_array n digit_t);
    ret <- crucible_fresh_var "ret" i32;
    crucible_return (tm ret);
};

let mp_subfast_spec n = binary_words_op digit_t n;
let mp_subfast_left_spec n = binary_words_left_op digit_t n;

let mp_mul_spec n m = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    (b, bp) <- ptr_to_fresh_readonly "b" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array m digit_t);

    crucible_execute_func [ap, bp, cp, tm {{ `n : [32] }}];

    points_to_fresh cp "c" (llvm_array m digit_t);
    return ();
};

let mp_mul_single_spec n m = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array m digit_t);

    crucible_execute_func [ap, ap, cp, tm {{ `n : [32] }}];

    points_to_fresh cp "c" (llvm_array m digit_t);
    return ();
};

let mp_shiftr1_spec n = do {
    (x, xp) <- ptr_to_fresh "x" (llvm_array n digit_t);
    crucible_execute_func [xp, tm {{ `n : [32] }}];
    points_to_fresh xp "x'" (llvm_array n digit_t);
    return ();
};


///////////////////////////////////////////////////////////////////////////////
// Proof commands

clear_words_ov <- verify "clear_words_r1" [] (clear_words_spec max_words_order);
// NOTE: 4*nwords_field for xDBLe and xTPLe
let nwords_field_x4 = eval_int {{ `(4 * nwords_field) : [64] }};
copy_words_nwords_field_x4_ov <- verify "copy_words_r1" [] (copy_words_spec nwords_field_x4);
copy_words_same_nwords_field_x4_ov <- verify "copy_words_r1" [] (copy_words_same_spec nwords_field_x4);

dxd_ov <- verify "digit_x_digit_r1" [] digit_x_digit_spec;
dlt_ov <- verify "is_digit_lessthan_ct" [] is_digit_lessthan_ct_spec;
dnz_ov <- verify "is_digit_nonzero_ct" [] is_digit_nonzero_ct_spec;
dz_ov <- verify "is_digit_zero_ct" [] is_digit_zero_ct_spec;

add_ov <- verify "mp_add_r1" [] (mp_add_spec nwords_field);
add_single_ov <- verify "mp_add_r1" [] (mp_add_single_spec nwords_field);

addx2_ov <- verify "mp_add_r1" [] (mp_add_spec twice_nwords_field);
addx2_left_ov <- verify "mp_add_r1" [] (mp_add_left_spec twice_nwords_field);

addfast_ov <- verify "mp_addfast_r1"
    [add_ov]
    (mp_addfast_spec nwords_field);
addfast_single_ov <- verify "mp_addfast_r1"
    [add_single_ov]
    (mp_addfast_single_spec nwords_field);

addfastx2_ov <- verify "mp_addfastx2_r1"
    [addx2_ov]
    (mp_addfast_spec twice_nwords_field);
addfastx2_left_ov <- verify "mp_addfastx2_r1"
    [addx2_left_ov]
    (mp_addfast_left_spec twice_nwords_field);

sub_ov <- verify "mp_sub_r1" [] (mp_sub_spec twice_nwords_field);
sub_left_ov <- verify "mp_sub_r1" [] (mp_sub_left_spec twice_nwords_field);

subfast_ov <- verify "mp_subfast_r1"
    [sub_ov]
    (mp_subfast_spec twice_nwords_field);
subfast_left_ov <- verify "mp_subfast_r1"
    [sub_left_ov]
    (mp_subfast_left_spec twice_nwords_field);

mul_ov <- verify "mp_mul_r1" [] (mp_mul_spec nwords_field twice_nwords_field);
mul_single_ov <- verify "mp_mul_r1" [] (mp_mul_single_spec nwords_field twice_nwords_field);
mul_half_ov <- verify "mp_mul_r1" [] (mp_mul_spec half_nwords_field nwords_field);

shiftr1_ov <- verify "mp_shiftr1_r1" [] (mp_shiftr1_spec nwords_field);

