//cshake.saw Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////////////
// Verify the hashing operations

import "../spec/include/keccak.cry";
import "../spec/interface/cshake.cry";
import "../spec/Loader.cry";


///////////////////////////////////////////////////////////////////////////////
// Specifications

let state_t = llvm_array 25 digit_t;

let load64_spec = do {
    (x, xp) <- ptr_to_fresh_readonly "x" (llvm_array 8 char_t);
    crucible_execute_func [xp];
    r <- crucible_fresh_var "r" i64;
    crucible_return (tm r);
};

let store64_spec = do {
    xp <- crucible_alloc (llvm_array 8 char_t);
    u <- crucible_fresh_var "u" i64;
    crucible_execute_func [xp, tm u];
    x <- crucible_fresh_var "x" (llvm_array 8 char_t);
    crucible_points_to xp (tm x);
};

let KeccakF1600_StatePermute_spec = do {
    (s, sp) <- ptr_to_fresh "state" state_t;
    crucible_execute_func [sp];
    res_s <- crucible_fresh_var "res_s" state_t;
    crucible_points_to sp (tm res_s);
};

let keccak_absorb_spec n = do {
    (s, sp) <- ptr_to_fresh "s" state_t;
    (m, mp) <- ptr_to_fresh_readonly "m" (llvm_array n char_t);
    crucible_execute_func [sp, tm {{ `SHAKE256_RATE : [32] }}, mp, tm {{ `n : [64 ]}}, tm {{ 0x04 : [8] }}];
    res_s <- crucible_fresh_var "res_s" state_t;
    crucible_points_to sp (tm res_s);
};

let keccak_squeezeblocks_spec n = do {
    let count = eval_int {{ `(n / SHAKE256_RATE) : [64] }};
    let size = eval_int {{ `(count * SHAKE256_RATE) : [64] }};
    hp <- crucible_alloc (llvm_array size char_t);
    (s, sp) <- ptr_to_fresh "s" state_t;
    crucible_execute_func [hp, tm {{ `count : [64] }}, sp, tm {{ `SHAKE256_RATE : [32] }}];
    if eval_bool {{ 0 < `size }} then do {
      h <- crucible_fresh_var "h" (llvm_array size char_t);
      crucible_points_to hp (tm h);
    } else do {
      return ();
    };
    res_s <- crucible_fresh_var "res_s" state_t;
    crucible_points_to sp (tm res_s);
};

let cshake256_simple_absorb_spec n = do {
    sp <- crucible_alloc state_t;
    cstm <- crucible_fresh_var "cstm" i16;
    (input, inputp) <- ptr_to_fresh_readonly "in" (llvm_array n char_t);
    crucible_execute_func [sp, tm cstm, inputp, tm {{ `n : [64] }}];
    res_s <- crucible_fresh_var "res_s" state_t;
    crucible_points_to sp (tm res_s);
};

let cshake256_simple_spec outsz insz = do {
    outp <- crucible_alloc (llvm_array outsz char_t);
    cstm <- crucible_fresh_var "cstm" i16;
    (input, inputp) <- ptr_to_fresh_readonly "in" (llvm_array insz char_t);
    crucible_execute_func
        [ outp
        , tm {{ (`outsz : [64]) }}
        , tm cstm
        , inputp
        , tm {{ `insz:[64] }}
        ];
    out <- crucible_fresh_var "out" (llvm_array outsz char_t);
    crucible_points_to outp (tm out);
};


///////////////////////////////////////////////////////////////////////////////
// Proof commands

load64_ov <- verify "load64_r1" [] load64_spec;
store64_ov <- verify "store64_r1" [] store64_spec;

KeccakF1600_StatePermute_ov <- admit "KeccakF1600_StatePermute_r1" []
    (KeccakF1600_StatePermute_spec);

keccak_absorb_ov0 <- verify "keccak_absorb_r1"
    [load64_ov, KeccakF1600_StatePermute_ov]
    (keccak_absorb_spec CRYPTO_CIPHERTEXTBYTES);
keccak_absorb_ov1 <- verify "keccak_absorb_r1"
    [load64_ov, KeccakF1600_StatePermute_ov]
    (keccak_absorb_spec FP2_ENCODED_BYTES);
keccak_absorb_ov2 <- verify "keccak_absorb_r1"
    [load64_ov, KeccakF1600_StatePermute_ov]
    (keccak_absorb_spec CIPHERTEXT_PLUS_MSG_BYTES);

keccak_squeezeblocks_ov0 <- verify "keccak_squeezeblocks_r1"
    [KeccakF1600_StatePermute_ov, store64_ov]
    (keccak_squeezeblocks_spec SECRETKEY_A_BYTES);
keccak_squeezeblocks_ov1 <- verify "keccak_squeezeblocks_r1"
    [KeccakF1600_StatePermute_ov, store64_ov]
    (keccak_squeezeblocks_spec MSG_BYTES);
keccak_squeezeblocks_ov2 <- verify "keccak_squeezeblocks_r1"
    [KeccakF1600_StatePermute_ov, store64_ov]
    (keccak_squeezeblocks_spec CRYPTO_BYTES);
keccak_squeezeblocks_ov3 <- verify "keccak_squeezeblocks_r1"
    [KeccakF1600_StatePermute_ov, store64_ov]
    (keccak_squeezeblocks_spec SHAKE256_RATE);

cshake256_simple_absorb_ov0 <- verify "cshake256_simple_absorb_r1"
    [KeccakF1600_StatePermute_ov, keccak_absorb_ov0]
    (cshake256_simple_absorb_spec CRYPTO_CIPHERTEXTBYTES);
cshake256_simple_absorb_ov1 <- verify "cshake256_simple_absorb_r1"
    [KeccakF1600_StatePermute_ov, keccak_absorb_ov1]
    (cshake256_simple_absorb_spec FP2_ENCODED_BYTES);
cshake256_simple_absorb_ov2 <- verify "cshake256_simple_absorb_r1"
    [KeccakF1600_StatePermute_ov, keccak_absorb_ov2]
    (cshake256_simple_absorb_spec CIPHERTEXT_PLUS_MSG_BYTES);

cshake256_simple_ov0 <- verify "cshake256_simple_r1"
    [ cshake256_simple_absorb_ov0
    , keccak_squeezeblocks_ov0
    , keccak_squeezeblocks_ov3
    ]
    (cshake256_simple_spec SECRETKEY_A_BYTES CRYPTO_CIPHERTEXTBYTES);
cshake256_simple_ov1 <- verify "cshake256_simple_r1"
    [ cshake256_simple_absorb_ov1
    , keccak_squeezeblocks_ov1
    , keccak_squeezeblocks_ov3
    ]
    (cshake256_simple_spec MSG_BYTES FP2_ENCODED_BYTES);
cshake256_simple_ov2 <- verify "cshake256_simple_r1"
    [ cshake256_simple_absorb_ov2
    , keccak_squeezeblocks_ov2
    , keccak_squeezeblocks_ov3
    ]
    (cshake256_simple_spec CRYPTO_BYTES CIPHERTEXT_PLUS_MSG_BYTES);

