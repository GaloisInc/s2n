//isogeny.saw Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

///////////////////////////////////////////////////////////////////////////////
// Verify the isogeny operations

import "../spec/shared/Constants.cry";


///////////////////////////////////////////////////////////////////////////////
// Specifications

let get_3_isog_spec = do {
    (p, pp) <- A_point_t "P";
    t2p <- C_f2elm_t();
    t3p <- C_f2elm_t();
    t4p <- crucible_alloc (llvm_array 2 f2elm_t);
    crucible_execute_func [pp, t2p, t3p, t4p];
    t2' <- crucible_fresh_var "get_3_isog_t2'" f2elm_t;
    crucible_points_to t2p (tm t2');
    t3' <- crucible_fresh_var "get_3_isog_t3'" f2elm_t;
    crucible_points_to t3p (tm t3');
    t4' <- crucible_fresh_var "get_3_isog_t4'" (llvm_array 2 f2elm_t);
    crucible_points_to t4p (tm t4');
};

let get_4_isog_spec = do {
    (p, pp) <- A_point_t "P";
    t2p <- C_f2elm_t();
    t3p <- C_f2elm_t();
    t4p <- crucible_alloc (llvm_array 3 f2elm_t);
    crucible_execute_func [pp, t2p, t3p, t4p];
    t2' <- crucible_fresh_var "get_4_isog_t2'" f2elm_t;
    crucible_points_to t2p (tm t2');
    t3' <- crucible_fresh_var "get_4_isog_t3'" f2elm_t;
    crucible_points_to t3p (tm t3');
    t4' <- crucible_fresh_var "get_4_isog_t4'" (llvm_array 3 f2elm_t);
    crucible_points_to t4p (tm t4');
};

let eval_3_isog_spec = do {
    (q, qp) <- B_point_t "Q";
    (coeff, coeffp) <- ptr_to_fresh_readonly "coeff" (llvm_array 2 f2elm_t);
    crucible_execute_func [qp, coeffp];
    q' <- crucible_fresh_var "eval_isog_q'" point_proj_t;
    crucible_points_to qp (tm q');
};

let eval_4_isog_spec = do {
    (q, qp) <- B_point_t  "P";
    (coeff, coeffp) <- ptr_to_fresh_readonly "coeff" (llvm_array 3 f2elm_t);
    crucible_execute_func [qp, coeffp];
    q' <- crucible_fresh_var "eval_isog_q'" point_proj_t;
    crucible_points_to qp (tm q');
};

let get_A_spec = do {
    (p, pp) <- A_f2elm_t "xP";
    (q, qp) <- A_f2elm_t "xQ";
    (r, rp) <- A_f2elm_t "xR";
    ap <- C_f2elm_t ();
    crucible_execute_func [pp, qp, rp, ap];
    a <- crucible_fresh_var "A" f2elm_t;
    crucible_points_to ap (tm a);
};

let inv_3_way_spec = do {
    (z1, z1p) <- B_f2elm_t "z1";
    (z2, z2p) <- B_f2elm_t "z2";
    (z3, z3p) <- B_f2elm_t "z3";
    crucible_execute_func [z1p, z2p, z3p];
    y1 <- crucible_fresh_var "inv_3_y1" f2elm_t;
    crucible_points_to z1p (tm y1);
    y2 <- crucible_fresh_var "inv_3_y2" f2elm_t;
    crucible_points_to z2p (tm y2);
    y3 <- crucible_fresh_var "inv_3_y3" f2elm_t;
    crucible_points_to z3p (tm y3);
};

let j_inv_spec = do {
    (a, ap) <- A_f2elm_t "A";
    (c, cp) <- A_f2elm_t "C";
    jinvp <- C_f2elm_t();
    crucible_execute_func [ap, cp, jinvp];
    jinv <- crucible_fresh_var "jinv" f2elm_t;
    crucible_points_to jinvp (tm jinv);
};

let xDBLADD_spec = do {
    (p, pp) <- B_point_t "P";
    (q, qp) <- B_point_t  "Q";
    (t3, t3p) <- A_f2elm_t "xPQ";
    (t4, t4p) <- A_f2elm_t "A24";
    crucible_execute_func [pp, qp, t3p, t4p];
    p' <- crucible_fresh_var "xDBLADD_p'" point_proj_t;
    crucible_points_to pp (tm p');
    q' <- crucible_fresh_var "xDBLADD_q'" point_proj_t;
    crucible_points_to qp (tm q');
};

let swap_points_spec = do {
    (p, pp) <- B_point_t "P";
    (q, qp) <- B_point_t  "Q";
    t <- crucible_fresh_var "option" (llvm_int 64);
    crucible_precond {{ t == 0 \/ t == -1 }};
    crucible_execute_func [pp, qp, tm t];
    p' <- crucible_fresh_var "p'_swap" point_proj_t;
    q' <- crucible_fresh_var "q'_swap" point_proj_t;
    crucible_points_to pp (tm p');
    crucible_points_to qp (tm q');
};

/* NOTE for LADDER3PT proof:

   For that proof, we added some conditions in as extra preconditions,
   but have also proved that these conditions are always true.
   However, the "goal_insert" mechansim that should let us drop these
   preconditions is not working well at the moment.

*/

let LADDER3PT_spec = do {
    (xP, xP_ptr) <- A_f2elm_t "xP";
    (xQ, xQ_ptr) <- A_f2elm_t "xQ";
    (xPQ, xPQ_ptr) <- A_f2elm_t "xPQ";
    (m, m_ptr) <- A_param "m" (llvm_array 4 digit_t);
    aliceOrBob <- A_uint_t "AliceOrBob";
    r_ptr <- C_point_t (); // "R"
    (a, a_ptr) <- A_f2elm_t "A";

    crucible_execute_func
      [ xP_ptr
      , xQ_ptr
      , xPQ_ptr
      , m_ptr
      , (tm aliceOrBob)
      , r_ptr
      , a_ptr
      ];

    res_r <- crucible_fresh_var "LADDER3PT_R" point_proj_t;
    crucible_points_to r_ptr (tm res_r);
};

let LADDER3PT_main_loop_spec = do {
    (r, r_ptr) <- B_point_t "R";
    r_ptr_ptr <- crucible_alloc (llvm_int 64);
    crucible_points_to r_ptr_ptr r_ptr;
    (m, m_ptr) <- A_param "m" (llvm_array 4 digit_t);
    m_ptr_ptr <- crucible_alloc (llvm_int 64);
    crucible_points_to m_ptr_ptr m_ptr;
    (r0, r0_ptr) <- B_point_t "R0";
    (r2, r2_ptr) <- B_point_t "R2";
    (a24, a24_ptr) <- A_f2elm_t "A24";
    a24_ptr_ptr <- crucible_alloc (llvm_int 64);
    crucible_points_to a24_ptr_ptr a24_ptr;
    mask_ptr <- crucible_alloc digit_t;
    (i, i_ptr) <- ptr_to_fresh "i" i32;
    (nbits, nbits_ptr) <- ptr_to_fresh "nbits" i32;
    bit_ptr <- crucible_alloc i32;
    swap_ptr <- crucible_alloc i32;
    (prevbit, prevbit_ptr) <- ptr_to_fresh "prevbit" i32;

    crucible_precond {{ prevbit == 0 \/ prevbit == 1 }};
    crucible_precond {{ nbits == g_OALICE_BITS \/ nbits == g_OBOB_BITS }};
    crucible_precond {{ 0 <= i /\ i <= nbits }};

    crucible_execute_func
      [ r_ptr_ptr
      , m_ptr_ptr
      , r0_ptr
      , r2_ptr
      , a24_ptr_ptr
      , mask_ptr
      , i_ptr
      , nbits_ptr
      , bit_ptr
      , swap_ptr
      , prevbit_ptr
      ];

    res_r <- crucible_fresh_var "LADDER3PT_R" point_proj_t;
    crucible_points_to r_ptr (tm res_r);
};


///////////////////////////////////////////////////////////////////////////////
// Proof commands

get_3_isog_ov <- verify "get_3_isog_r1"
    [ fp2add503_ov, fp2add503_left_ov, fp2add503_right_ov, fp2add503_same_ov
    , fp2sub503_ov,fp2sub503_left_ov
    , fp2mul503_mont_ov, fp2mul503_mont_left_ov, fp2mul503_mont_right_ov
    , fp2sqr503_mont_ov, fp2sqr503_mont_same_ov ]
    get_3_isog_spec;

get_4_isog_ov <- verify "get_4_isog_r1"
    [ fp2add503_ov, fp2add503_left_ov, fp2add503_right_ov, fp2add503_same_ov
    , fp2sub503_ov, fp2mul503_mont_ov, fp2mul503_mont_left_ov
    , fp2sqr503_mont_ov, fp2sqr503_mont_same_ov ]
    get_4_isog_spec;

let eval_ov =
    [ fp2add503_ov, fp2sub503_ov, fp2sub503_right_ov
    , fp2mul503_mont_ov, fp2mul503_mont_left_ov
    , fp2sqr503_mont_same_ov ];

eval_3_isog_ov <- verify "eval_3_isog_r1" eval_ov eval_3_isog_spec;
eval_4_isog_ov <- verify "eval_4_isog_r1" eval_ov eval_4_isog_spec;

get_A_ov <- verify "get_A_r1"
    [ fp2copy503_ov, fp2add503_ov, fp2add503_left_ov
    , fp2add503_right_ov, fp2add503_same_ov
    , fp2sub503_left_ov, fp2mul503_mont_ov, fp2mul503_mont_left_ov
    , fp2sqr503_mont_same_ov, fp2inv503_mont_ov ]
    get_A_spec;

inv_3_way_ov <- verify "inv_3_way_r1"
    [ fp2copy503_ov, fp2mul503_mont_ov, fp2inv503_mont_ov ]
    inv_3_way_spec;

j_inv_ov <- verify "j_inv_r1"
    [ fp2add503_left_ov, fp2add503_ov, fp2add503_same_ov, fp2add503_pair_ov
    , fp2sub503_ov, fp2sub503_left_ov, fp2sub503_right_ov
    , fp2mul503_mont_left_ov, fp2sqr503_mont_ov, fp2sqr503_mont_same_ov
    , fp2inv503_mont_ov ]
    j_inv_spec;

xDBLADD_ov <- verify "xDBLADD_r1"
    [ fp2add503_ov, fp2add503_left_ov, fp2add503_right_ov
    , fp2sub503_ov, fp2correction503_ov
    , fp2mul503_mont_ov, fp2mul503_mont_left_ov
    , fp2sqr503_mont_ov, fp2sqr503_mont_same_ov ]
    xDBLADD_spec;

swap_points_ov <- verify "swap_points_r1" [] swap_points_spec;

LADDER3PT_main_loop_ov <- admit "__breakpoint__LADDER3PT_main_loop#LADDER3PT_r1"
    [] LADDER3PT_main_loop_spec;
let ladder_overrides =
    [ fpcopy503_ov, fpzero503_ov, fp2copy503_ov, fp2add503_right_ov
    , fp2add503_same_ov, fp2div2_503_same_ov, fp2mul503_mont_left_ov
    , swap_points_ov, xDBLADD_ov
    , LADDER3PT_main_loop_ov
    ];

verify "__breakpoint__LADDER3PT_main_loop#LADDER3PT_r1"
    ladder_overrides
    LADDER3PT_main_loop_spec;
LADDER3PT_ov <- verify "LADDER3PT_r1"
    ladder_overrides
    LADDER3PT_spec;

