//field.saw Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

///////////////////////////////////////////////////////////////////////////////
// Verify the field operations


///////////////////////////////////////////////////////////////////////////////
// Specifications

let unary_ptr_op_felm = do {
    (a, ap) <- A_felm_t "a";
    cp <- C_felm_t ();
    crucible_execute_func [ap, cp];
    c <- crucible_fresh_var "c" felm_t;
    crucible_points_to cp (tm c);
};

let binary_ptr_op_felm left right = do {
    (a, ap) <- (if left then B_felm_t else A_felm_t) "a";
    (b, bp) <- (if right then B_felm_t else A_felm_t) "b";

    rp <- if left then
            do { crucible_execute_func [ap, bp, ap]; return ap; }
          else if right then
            do { crucible_execute_func [ap, bp, bp]; return bp; }
          else do {
            cp <- C_felm_t ();
            crucible_execute_func [ap, bp, cp];
            return cp; };

    c <- crucible_fresh_var "c" felm_t;
    crucible_points_to rp (tm c);
};

let binary_ptr_op_felm_pair = do {
    (a, ap) <- A_felm_t "a";
    cp <- C_felm_t ();
    crucible_execute_func [ap, ap, cp];
    c <- crucible_fresh_var "c" felm_t;
    crucible_points_to cp (tm c);
};

let binary_ptr_op_felm_same = do {
    (a, ap) <- B_felm_t "a";
    crucible_execute_func [ap, ap, ap];
    c <- crucible_fresh_var "c" felm_t;
    crucible_points_to ap (tm c);
};

let inplace_ptr_op_f2elm = do {
    (a, ap) <- B_f2elm_t "a";
    crucible_execute_func [ap];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to ap (tm c);
};

let unary_ptr_op_f2elm = do {
    (a, ap) <- A_f2elm_t "a";
    cp <- C_f2elm_t ();
    crucible_execute_func [ap, cp];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to cp (tm c);
};

let binary_ptr_op_f2elm left right = do {
    (a, ap) <- (if left then B_f2elm_t else A_f2elm_t) "a";
    (b, bp) <- (if right then B_f2elm_t else A_f2elm_t) "b";

    rp <- if left then
              do { crucible_execute_func [ap, bp, ap]; return ap; }
          else if right then
              do { crucible_execute_func [ap, bp, bp]; return bp; }
          else do {
              cp <- C_f2elm_t ();
              crucible_execute_func [ap, bp, cp];
              return cp; };

    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to rp (tm c);
};

let binary_ptr_op_f2elm_same = do {
    (a, ap) <- B_f2elm_t "a";
    crucible_execute_func [ap, ap, ap];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to ap (crucible_term c);
};

let binary_ptr_op_f2elm_pair = do {
    (a, ap) <- B_f2elm_t "a";
    (c, cp) <- B_f2elm_t "c";
    crucible_execute_func [ap, ap, cp];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to cp (crucible_term c);
};


let fpzero503_spec = do {
    cp <- C_felm_t ();
    crucible_execute_func [cp];
    c <- crucible_fresh_var "c" felm_t;
    crucible_points_to cp (tm c);
};

let fpcopy503_spec = do {
    (a, ap) <- A_felm_t "a";
    cp <- C_felm_t ();
    crucible_execute_func [ap, cp];
    crucible_points_to cp (tm a);
};

let fpcorrection503_spec = do {
    (a, ap) <- B_felm_t "a";
    crucible_execute_func [ap];
    c <- crucible_fresh_var "c" felm_t;
    crucible_points_to ap (tm c);
};

let fpneg503_spec = do {
    (a, ap) <- B_felm_t "a";
    crucible_execute_func [ap];
    c <- crucible_fresh_var "c" felm_t;
    crucible_points_to ap (tm c);
};

let fpadd503_spec = binary_ptr_op_felm false false;
let fpadd503_left_spec = binary_ptr_op_felm true false;
let fpadd503_right_spec = binary_ptr_op_felm false true;
let fpadd503_same_spec = binary_ptr_op_felm_same;
let fpadd503_pair_spec = binary_ptr_op_felm_pair;

let fpsub503_spec = binary_ptr_op_felm false false;
let fpsub503_left_spec = binary_ptr_op_felm true false;
let fpsub503_right_spec = binary_ptr_op_felm false true;
let fpsub503_same_spec = binary_ptr_op_felm_same;

let fpdiv2_503_spec = unary_ptr_op_felm;
let fpdiv2_503_same_spec = do {
    (a, ap) <- B_felm_t "a";
    crucible_execute_func [ap, ap];
    c <- crucible_fresh_var "c" felm_t;
    crucible_points_to ap (tm c);
};

let fpmul503_mont_spec left right = do {
    (a, ap) <- (if left then B_felm_t else A_felm_t) "a";
    (b, bp) <- (if right then
                   (if left then return (a,ap) else  B_felm_t "b")
                else A_felm_t "b");

    rp <- if left then
            do { crucible_execute_func [ap, bp, ap]; return ap; }
          else if right then
            do {crucible_execute_func [ap, bp, bp]; return bp; }
          else
            do { cp <- C_felm_t ();
                 crucible_execute_func [ap, bp, cp];
                 return cp; };

    c <- crucible_fresh_var "c" felm_t;
    crucible_points_to rp (tm c);
};

let fpsqr503_mont_spec = do {
    (a, ap) <- A_felm_t "a";
    cp <- C_felm_t ();
    crucible_execute_func [ap, cp];
    c <- crucible_fresh_var "c" felm_t;
    crucible_points_to cp (tm c);
};

let fpsqr503_mont_same_spec = do {
    (a, ap) <- B_felm_t "a";
    crucible_execute_func [ap, ap];
    c <- crucible_fresh_var "c" felm_t;
    crucible_points_to ap (tm c);
};

let rdc_mont_spec = do {
    (a, ap) <- A_dfelm_t "a";
    cp <- C_felm_t ();
    crucible_execute_func [ap, cp];
    c <- crucible_fresh_var "c" felm_t;
    crucible_points_to cp (tm c);
};

let to_mont_spec same = do {
    (a, ap) <- (if same then B_felm_t else A_felm_t) "a";

    rp <- if same then
            do { crucible_execute_func [ap, ap]; return ap; }
          else
            do{ cp <- C_felm_t ();
                crucible_execute_func [ap, cp];
                return cp; };

    c <- crucible_fresh_var "c" felm_t;
    crucible_points_to rp (tm c);
};

let from_mont_spec = do {
    (a, ap) <- A_felm_t "a";
    cp <- C_felm_t ();
    crucible_execute_func [ap, cp];
    c <- crucible_fresh_var "c" felm_t;
    crucible_points_to cp (tm c);
};

let fp2add503_spec = binary_ptr_op_f2elm false false;
let fp2add503_left_spec = binary_ptr_op_f2elm true false;
let fp2add503_right_spec = binary_ptr_op_f2elm false true;
let fp2add503_same_spec = binary_ptr_op_f2elm_same;
let fp2add503_pair_spec = binary_ptr_op_f2elm_pair;

let fp2sub503_spec = binary_ptr_op_f2elm false false;
let fp2sub503_left_spec = binary_ptr_op_f2elm true false;
let fp2sub503_right_spec = binary_ptr_op_f2elm false true;
let fp2sub503_same_spec = binary_ptr_op_f2elm_same;

let fp2neg503_spec = inplace_ptr_op_f2elm;

let fp2div2_503_spec = unary_ptr_op_f2elm;

let fp2div2_503_same_spec = do {
    (a, ap) <- A_f2elm_t "a";
    crucible_execute_func [ap, ap];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to ap (tm c);
};

let fp2correction503_spec = do {
    (a, ap) <- B_f2elm_t "a";
    crucible_execute_func [ap];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to ap (tm c);
};

let fp2zero503_spec = do {
    cp <- C_f2elm_t ();
    crucible_execute_func [cp];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to cp (tm c);
};

let fp2copy503_spec = do {
    (a, ap) <- A_f2elm_t "a";
    cp <- C_f2elm_t ();
    crucible_execute_func [ap, cp];
    crucible_points_to cp (tm a);
};

let fp2mul503_mont_spec = do {
    (a, ap) <- A_f2elm_t "a";
    (b, bp) <- A_f2elm_t "b";
    cp <- C_f2elm_t ();
    crucible_execute_func [ap, bp, cp];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to cp (tm c);
};

let fp2mul503_mont_left_spec = do {
    (a, ap) <- B_f2elm_t "a";
    (b, bp) <- A_f2elm_t "b";
    crucible_execute_func [ap, bp, ap];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to ap (tm c);
};

let fp2mul503_mont_right_spec = do {
    (a, ap) <- A_f2elm_t "a";
    (b, bp) <- B_f2elm_t "b";
    crucible_execute_func [ap, bp, bp];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to bp (tm c);
};

let fp2mul503_mont_same_spec = do {
    (a, ap) <- B_f2elm_t "a";
    crucible_execute_func [ap, ap, ap];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to ap (tm c);
};

let fp2sqr503_mont_spec = do {
    (a, ap) <- A_f2elm_t "a";
    cp <- C_f2elm_t ();
    crucible_execute_func [ap, cp];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to cp (tm c);
};

let fp2sqr503_mont_same_spec = do {
    (a, ap) <- B_f2elm_t "a";
    crucible_execute_func [ap, ap];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to ap (tm c);
};

let to_fp2mont_spec same = do {
    (a, ap) <- (if same then B_f2elm_t else A_f2elm_t) "a";
    rp <- if same then
            do { crucible_execute_func [ap, ap]; return ap; }
          else
            do { cp <- C_f2elm_t (); crucible_execute_func [ap, cp];
                 return cp; };
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to rp (tm c);
};

let from_fp2mont_spec = do {
    (a, ap) <- A_f2elm_t "a";
    cp <- C_f2elm_t ();
    crucible_execute_func [ap, cp];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to cp (tm c);
};

let fpinv503_chain_mont_spec = do {
  (a, a_ptr) <- ptr_to_fresh "a" felm_t;
  crucible_execute_func [a_ptr];
  res_a <- crucible_fresh_var "res_a" felm_t;
  crucible_points_to a_ptr (crucible_term res_a);
};

let __breakpoint__fpinv_chain_mont_first_spec = do {
  (a, a_ptr) <- ptr_to_fresh "a" felm_t;
  a_ptr_ptr <- crucible_alloc (llvm_int 64);
  crucible_points_to a_ptr_ptr a_ptr;
  (i, i_ptr) <- ptr_to_fresh "i" i32;
  j_ptr <- crucible_alloc i32;
  (t, t_ptr) <-  ptr_to_fresh "t" (llvm_array 15 felm_t);
  (tt, tt_ptr) <- ptr_to_fresh "tt" felm_t;
  crucible_precond {{ 0 <= i /\ i <= 14 }};

  crucible_execute_func [a_ptr_ptr, i_ptr, j_ptr, t_ptr, tt_ptr];

  res_a <- crucible_fresh_var "res_a" felm_t;
  crucible_points_to a_ptr (crucible_term res_a);
};

let __breakpoint__fpinv_chain_mont_middle_spec = do {
  (a, a_ptr) <- ptr_to_fresh "a" felm_t;
  a_ptr_ptr <- crucible_alloc (llvm_int 64);
  crucible_points_to a_ptr_ptr a_ptr;
  (i, i_ptr) <- ptr_to_fresh "i" i32;
  j_ptr <- crucible_alloc i32;
  (t, t_ptr) <-  ptr_to_fresh "t" (llvm_array 15 felm_t);
  (tt, tt_ptr) <- ptr_to_fresh "tt" felm_t;
  crucible_precond {{ 0 <= i /\ i <= 8 }};

  crucible_execute_func [a_ptr_ptr, i_ptr, j_ptr, t_ptr, tt_ptr];

  res_a <- crucible_fresh_var "res_a" felm_t;
  crucible_points_to a_ptr (crucible_term res_a);
};

let __breakpoint__fpinv_chain_mont_last_spec = do {
  (a, a_ptr) <- ptr_to_fresh "a" felm_t;
  a_ptr_ptr <- crucible_alloc (llvm_int 64);
  crucible_points_to a_ptr_ptr a_ptr;
  (i, i_ptr) <- ptr_to_fresh "i" i32;
  (j, j_ptr) <- ptr_to_fresh "j" i32;
  (t, t_ptr) <-  ptr_to_fresh "t" (llvm_array 15 felm_t);
  (tt, tt_ptr) <- ptr_to_fresh "tt" felm_t;
  crucible_precond {{ 0 <= i /\ i <= 5 }};
  crucible_precond {{ 0 <= j /\ j <= 49 }};

  crucible_execute_func [a_ptr_ptr, i_ptr, j_ptr, t_ptr, tt_ptr];

  res_a <- crucible_fresh_var "res_a" felm_t;
  crucible_points_to a_ptr (crucible_term res_a);
};

let fpinv503_mont_spec = do {
  (a, a_ptr) <- ptr_to_fresh "a" felm_t;
  crucible_execute_func [a_ptr];
  res_a <- crucible_fresh_var "res_a" felm_t;
  crucible_points_to a_ptr (crucible_term res_a);
};

let fp2inv503_mont_spec = do {
    (a, ap) <- B_f2elm_t "a";
    crucible_execute_func [ap];
    c <- crucible_fresh_var "c" f2elm_t;
    crucible_points_to ap (tm c);
};


///////////////////////////////////////////////////////////////////////////////
// Proof commands

fpzero503_ov <- verify "fpzero503" [] fpzero503_spec;
fpcopy503_ov <- verify "fpcopy503" [] fpcopy503_spec;
fpcorrection503_ov <- verify "fpcorrection503" [] fpcorrection503_spec;

fpadd503_ov <- verify "fpadd503" [] fpadd503_spec;
fpadd503_left_ov <- verify "fpadd503" [] fpadd503_left_spec;
fpadd503_right_ov <- verify "fpadd503" [] fpadd503_right_spec;
fpadd503_same_ov <- verify "fpadd503" [] fpadd503_same_spec;
fpadd503_pair_ov <- verify "fpadd503" [] fpadd503_pair_spec;

fpsub503_ov <- verify "fpsub503" [] fpsub503_spec;
fpsub503_left_ov <- verify "fpsub503" [] fpsub503_left_spec;
fpsub503_right_ov <- verify "fpsub503" [] fpsub503_right_spec;
fpsub503_same_ov <- verify "fpsub503" [] fpsub503_same_spec;

fpneg503_ov <- verify "fpneg503" [] fpneg503_spec;

fpdiv2_503_ov <- verify "fpdiv2_503" [] fpdiv2_503_spec;
fpdiv2_503_same_ov <- verify "fpdiv2_503" [] fpdiv2_503_same_spec;

rdc_mont_ov <- verify "rdc_mont_r1"
    [dxd_ov]
    rdc_mont_spec;

fpmul503_mont_ov <- verify "fpmul503_mont"
    [rdc_mont_ov,mul_ov]
    (fpmul503_mont_spec false false);
fpmul503_mont_left_ov <- verify "fpmul503_mont"
    [rdc_mont_ov,mul_ov]
    (fpmul503_mont_spec true false);
fpmul503_mont_right_ov <- verify "fpmul503_mont"
    [rdc_mont_ov,mul_ov]
    (fpmul503_mont_spec false true);
fpmul503_mont_same_ov <- verify "fpmul503_mont"
    [rdc_mont_ov,mul_ov]
    (fpmul503_mont_spec true true);

fpsqr503_mont_ov <- verify "fpsqr503_mont"
    [mul_single_ov,rdc_mont_ov]
    fpsqr503_mont_spec;
fpsqr503_mont_same_ov <- verify "fpsqr503_mont"
    [mul_single_ov,rdc_mont_ov]
    fpsqr503_mont_same_spec;

fp2copy503_ov <- verify "fp2copy503"
    [fpcopy503_ov] fp2copy503_spec;

fp2correction503_ov <- verify "fp2correction503"
    [fpcorrection503_ov] fp2correction503_spec;

fp2add503_ov <- verify "fp2add503"
    [fpadd503_ov] fp2add503_spec;
fp2add503_left_ov <- verify "fp2add503"
    [fpadd503_left_ov] fp2add503_left_spec;
fp2add503_right_ov <- verify "fp2add503"
    [fpadd503_right_ov] fp2add503_right_spec;
fp2add503_same_ov <- verify "fp2add503"
    [fpadd503_same_ov] fp2add503_same_spec;
fp2add503_pair_ov <- verify "fp2add503"
    [fpadd503_pair_ov] fp2add503_pair_spec;

fp2sub503_ov <- verify "fp2sub503"
    [fpsub503_ov] fp2sub503_spec;
fp2sub503_left_ov <- verify "fp2sub503"
    [fpsub503_left_ov] fp2sub503_left_spec;
fp2sub503_right_ov <- verify "fp2sub503"
    [fpsub503_right_ov] fp2sub503_right_spec;
fp2sub503_same_ov <- verify "fp2sub503"
    [fpsub503_same_ov] fp2sub503_same_spec;

fp2neg503_ov <- verify "fp2neg503"
    [fpneg503_ov]
    fp2neg503_spec;

fp2div2_503_ov <- verify "fp2div2_503"
    [fpdiv2_503_ov] fp2div2_503_spec;
fp2div2_503_same_ov <- verify "fp2div2_503"
    [fpdiv2_503_same_ov] fp2div2_503_same_spec;

fp2mul503_mont_ov <- verify "fp2mul503_mont"
    [fpmul503_mont_ov] fp2mul503_mont_spec;
fp2mul503_mont_left_ov <- verify "fp2mul503_mont"
    [fpmul503_mont_left_ov] fp2mul503_mont_left_spec;
fp2mul503_mont_right_ov <- verify "fp2mul503_mont"
    [fpmul503_mont_right_ov] fp2mul503_mont_right_spec;
fp2mul503_mont_same_ov <- verify "fp2mul503_mont"
    [fpmul503_mont_same_ov] fp2mul503_mont_same_spec;

fp2sqr503_mont_ov <- verify "fp2sqr503_mont"
    [fpsqr503_mont_ov]
    fp2sqr503_mont_spec;
fp2sqr503_mont_same_ov <- verify "fp2sqr503_mont"
    [fpsqr503_mont_same_ov]
    fp2sqr503_mont_same_spec;

to_mont_ov <- verify "to_mont_r1"
    [fpmul503_mont_ov] (to_mont_spec false);
to_mont_same_ov <- verify "to_mont_r1"
    [fpmul503_mont_left_ov] (to_mont_spec true);
from_mont_ov <- verify "from_mont_r1"
    [fpmul503_mont_ov,fpcorrection503_ov]
    from_mont_spec;

to_fp2mont_ov <- verify "to_fp2mont_r1"
    [to_mont_ov]
    (to_fp2mont_spec false);
to_fp2mont_same_ov <- verify "to_fp2mont_r1"
    [to_mont_same_ov]
    (to_fp2mont_spec true);
from_fp2mont_ov <- verify "from_fp2mont_r1"
    [from_mont_ov]
    from_fp2mont_spec;

__breakpoint__fpinv_chain_mont0_ov <- admit "__breakpoint__fpinv_chain_mont0#fpinv503_chain_mont"
    [] __breakpoint__fpinv_chain_mont_first_spec;
__breakpoint__fpinv_chain_mont1_ov <- admit "__breakpoint__fpinv_chain_mont1#fpinv503_chain_mont"
    [] __breakpoint__fpinv_chain_mont_middle_spec;
__breakpoint__fpinv_chain_mont2_ov <- admit "__breakpoint__fpinv_chain_mont2#fpinv503_chain_mont"
    [] __breakpoint__fpinv_chain_mont_middle_spec;
__breakpoint__fpinv_chain_mont3_ov <- admit "__breakpoint__fpinv_chain_mont3#fpinv503_chain_mont"
    [] __breakpoint__fpinv_chain_mont_middle_spec;
__breakpoint__fpinv_chain_mont4_ov <- admit "__breakpoint__fpinv_chain_mont4#fpinv503_chain_mont"
    [] __breakpoint__fpinv_chain_mont_last_spec;
let fpinv503_mont_O =
    [ fpmul503_mont_ov
    , fpmul503_mont_right_ov
    , fpsqr503_mont_ov
    , fpsqr503_mont_same_ov
    , fpcopy503_ov
    , __breakpoint__fpinv_chain_mont0_ov
    , __breakpoint__fpinv_chain_mont1_ov
    , __breakpoint__fpinv_chain_mont2_ov
    , __breakpoint__fpinv_chain_mont3_ov
    , __breakpoint__fpinv_chain_mont4_ov
    ];

verify "__breakpoint__fpinv_chain_mont0#fpinv503_chain_mont"
    fpinv503_mont_O
    __breakpoint__fpinv_chain_mont_first_spec;
verify "__breakpoint__fpinv_chain_mont1#fpinv503_chain_mont"
    fpinv503_mont_O
    __breakpoint__fpinv_chain_mont_middle_spec;
verify "__breakpoint__fpinv_chain_mont2#fpinv503_chain_mont"
    fpinv503_mont_O
    __breakpoint__fpinv_chain_mont_middle_spec;
verify "__breakpoint__fpinv_chain_mont3#fpinv503_chain_mont"
    fpinv503_mont_O
    __breakpoint__fpinv_chain_mont_middle_spec;
verify "__breakpoint__fpinv_chain_mont4#fpinv503_chain_mont"
    fpinv503_mont_O
    __breakpoint__fpinv_chain_mont_last_spec;
fpinv503_chain_mont_ov <- verify "fpinv503_chain_mont"
    fpinv503_mont_O
    fpinv503_chain_mont_spec;

fpinv503_mont_ov <- verify "fpinv503_mont"
    [ fpcopy503_ov
    , fpinv503_chain_mont_ov
    , fpsqr503_mont_same_ov
    , fpmul503_mont_left_ov
    ]
    fpinv503_mont_spec;

fp2inv503_mont_ov <- verify "fp2inv503_mont"
    [ fpsqr503_mont_ov
    , fpadd503_left_ov
    , fpinv503_mont_ov
    , fpneg503_ov
    , fpmul503_mont_left_ov
    ]
    fp2inv503_mont_spec;

