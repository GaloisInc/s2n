// helpers.saw Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0


///////////////////////////////////////////////////////////////////////////////
// Helper functions for writing crucible setups

let i8 = llvm_int 8;
let i16 = llvm_int 16;
let i32 = llvm_int 32;
let i64 = llvm_int 64;
let tm = crucible_term;

let alloc_init ty v = do {
  p <- crucible_alloc ty;
  crucible_points_to p (crucible_term v);
  return p;
};

let alloc_init_readonly ty v = do {
  p <- crucible_alloc_readonly ty;
  crucible_points_to p (crucible_term v);
  return p;
};

let ptr_to_fresh n ty = do {
  x <- crucible_fresh_var n ty;
  p <- alloc_init ty x;
  return (x, p);
};

let ptr_to_fresh_readonly n ty = do {
  x <- crucible_fresh_var n ty;
  p <- alloc_init_readonly ty x;
  return (x, p);
};


// NOTES: These codify the common patterns in defining parameters.
//        There are 3 kinds of reference parameters: in passed by reference,
//        inout passed by reference, and out passed by reference.
let in_ref ty n = ptr_to_fresh_readonly n ty;

let inout_ref ty n = ptr_to_fresh n ty;

let out_ref = crucible_alloc;

let point_to ty p n = do {
  x <- crucible_fresh_var n ty;
  crucible_points_to p (crucible_term x);
  return x;
};

